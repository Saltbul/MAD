{"ast":null,"code":"import PanResponder from \"react-native-web/dist/exports/PanResponder\";\nimport tinycolor from \"tinycolor2\";\nexport function toHsv(color) {\n  return tinycolor(color).toHsv();\n}\nexport function fromHsv(hsv) {\n  return tinycolor(hsv).toHexString();\n}\nvar fn = function fn() {\n  return true;\n};\nexport function createPanResponder(_a) {\n  var _b = _a.onStart,\n    onStart = _b === void 0 ? fn : _b,\n    _c = _a.onMove,\n    onMove = _c === void 0 ? fn : _c,\n    _d = _a.onEnd,\n    onEnd = _d === void 0 ? fn : _d;\n  return PanResponder.create({\n    onStartShouldSetPanResponder: fn,\n    onStartShouldSetPanResponderCapture: fn,\n    onMoveShouldSetPanResponder: fn,\n    onMoveShouldSetPanResponderCapture: fn,\n    onPanResponderTerminationRequest: fn,\n    onPanResponderGrant: function onPanResponderGrant(evt, state) {\n      return onStart({\n        x: evt.nativeEvent.pageX,\n        y: evt.nativeEvent.pageY\n      }, evt, state);\n    },\n    onPanResponderMove: function onPanResponderMove(evt, state) {\n      return onMove({\n        x: evt.nativeEvent.pageX,\n        y: evt.nativeEvent.pageY\n      }, evt, state);\n    },\n    onPanResponderRelease: function onPanResponderRelease(evt, state) {\n      return onEnd({\n        x: evt.nativeEvent.pageX,\n        y: evt.nativeEvent.pageY\n      }, evt, state);\n    }\n  });\n}\nexport function rotatePoint(point, angle, center) {\n  if (center === void 0) {\n    center = {\n      x: 0,\n      y: 0\n    };\n  }\n  var transOriginX = point.x - center.x;\n  var transOriginY = point.y - center.y;\n  var rotatedX = transOriginX * Math.cos(angle) - transOriginY * Math.sin(angle);\n  var rotatedY = transOriginY * Math.cos(angle) + transOriginX * Math.sin(angle);\n  var normalizedX = rotatedX + center.x;\n  var normalizedY = rotatedY + center.y;\n  return {\n    x: normalizedX,\n    y: normalizedY\n  };\n}","map":{"version":3,"mappings":";AAKA,OAAOA,SAAS,MAAM,YAAY;AASlC,OAAM,SAAUC,KAAK,CAACC,KAAa;EACjC,OAAOF,SAAS,CAACE,KAAK,CAAC,CAACD,KAAK,EAAE;AACjC;AAOA,OAAM,SAAUE,OAAO,CAACC,GAAa;EACnC,OAAOJ,SAAS,CAACI,GAAG,CAAC,CAACC,WAAW,EAAE;AACrC;AAQA,IAAMC,EAAE,GAAG,SAALA,EAAE,GAAG;EAAM,WAAI;AAAJ,CAAI;AAIrB,OAAM,SAAUC,kBAAkB,CAACC,EAQlC;MAPCC,eAAY;IAAZC,OAAO,mBAAGJ,EAAE;IACZK,cAAW;IAAXC,MAAM,mBAAGN,EAAE;IACXO,aAAU;IAAVC,KAAK,mBAAGR,EAAE;EAMV,OAAOS,YAAY,CAACC,MAAM,CAAC;IACzBC,4BAA4B,EAAEX,EAAE;IAChCY,mCAAmC,EAAEZ,EAAE;IACvCa,2BAA2B,EAAEb,EAAE;IAC/Bc,kCAAkC,EAAEd,EAAE;IACtCe,gCAAgC,EAAEf,EAAE;IACpCgB,mBAAmB,EAAE,6BAACC,GAAG,EAAEC,KAAK;MAC9B,OAAOd,OAAO,CACZ;QAAEe,CAAC,EAAEF,GAAG,CAACG,WAAW,CAACC,KAAK;QAAEC,CAAC,EAAEL,GAAG,CAACG,WAAW,CAACG;MAAK,CAAE,EACtDN,GAAG,EACHC,KAAK,CACN;IACH,CAAC;IACDM,kBAAkB,EAAE,4BAACP,GAAG,EAAEC,KAAK;MAC7B,OAAOZ,MAAM,CACX;QAAEa,CAAC,EAAEF,GAAG,CAACG,WAAW,CAACC,KAAK;QAAEC,CAAC,EAAEL,GAAG,CAACG,WAAW,CAACG;MAAK,CAAE,EACtDN,GAAG,EACHC,KAAK,CACN;IACH,CAAC;IACDO,qBAAqB,EAAE,+BAACR,GAAG,EAAEC,KAAK;MAChC,OAAOV,KAAK,CACV;QAAEW,CAAC,EAAEF,GAAG,CAACG,WAAW,CAACC,KAAK;QAAEC,CAAC,EAAEL,GAAG,CAACG,WAAW,CAACG;MAAK,CAAE,EACtDN,GAAG,EACHC,KAAK,CACN;IACH;GACD,CAAC;AACJ;AAUA,OAAM,SAAUQ,WAAW,CACzBC,KAAc,EACdC,KAAa,EACbC,MAAgC;EAAhC;IAAAA;MAAoBV,CAAC,EAAE,CAAC;MAAEG,CAAC,EAAE;IAAC,CAAE;EAAA;EAGhC,IAAMQ,YAAY,GAAGH,KAAK,CAACR,CAAC,GAAGU,MAAM,CAACV,CAAC;EACvC,IAAMY,YAAY,GAAGJ,KAAK,CAACL,CAAC,GAAGO,MAAM,CAACP,CAAC;EAGvC,IAAMU,QAAQ,GACZF,YAAY,GAAGG,IAAI,CAACC,GAAG,CAACN,KAAK,CAAC,GAAGG,YAAY,GAAGE,IAAI,CAACE,GAAG,CAACP,KAAK,CAAC;EACjE,IAAMQ,QAAQ,GACZL,YAAY,GAAGE,IAAI,CAACC,GAAG,CAACN,KAAK,CAAC,GAAGE,YAAY,GAAGG,IAAI,CAACE,GAAG,CAACP,KAAK,CAAC;EAGjE,IAAMS,WAAW,GAAGL,QAAQ,GAAGH,MAAM,CAACV,CAAC;EACvC,IAAMmB,WAAW,GAAGF,QAAQ,GAAGP,MAAM,CAACP,CAAC;EACvC,OAAO;IACLH,CAAC,EAAEkB,WAAW;IACdf,CAAC,EAAEgB;GACJ;AACH","names":["tinycolor","toHsv","color","fromHsv","hsv","toHexString","fn","createPanResponder","_a","_b","onStart","_c","onMove","_d","onEnd","PanResponder","create","onStartShouldSetPanResponder","onStartShouldSetPanResponderCapture","onMoveShouldSetPanResponder","onMoveShouldSetPanResponderCapture","onPanResponderTerminationRequest","onPanResponderGrant","evt","state","x","nativeEvent","pageX","y","pageY","onPanResponderMove","onPanResponderRelease","rotatePoint","point","angle","center","transOriginX","transOriginY","rotatedX","Math","cos","sin","rotatedY","normalizedX","normalizedY"],"sourceRoot":"","sources":["../src/utils.ts"],"sourcesContent":["import {\n  GestureResponderEvent,\n  PanResponder,\n  PanResponderGestureState,\n} from \"react-native\"\nimport tinycolor from \"tinycolor2\"\n\nimport { HsvColor, Point2D } from \"./typeHelpers\"\n\n/**\n * Converts color to hsv representation.\n * @param {string} color any color represenation - name, hexa, rgb\n * @return {object} { h: number, s: number, v: number } object literal\n */\nexport function toHsv(color: string): HsvColor {\n  return tinycolor(color).toHsv()\n}\n\n/**\n * Converts hsv object to hexa color string.\n * @param {object} hsv { h: number, s: number, v: number } object literal\n * @return {string} color in hexa representation\n */\nexport function fromHsv(hsv: HsvColor): string {\n  return tinycolor(hsv).toHexString()\n}\n\ntype PanResponderCallback = (\n  { x, y }: Point2D,\n  event: GestureResponderEvent,\n  state: PanResponderGestureState\n) => boolean;\n\nconst fn = () => true\n/**\n * Simplified pan responder wrapper.\n */\nexport function createPanResponder({\n  onStart = fn,\n  onMove = fn,\n  onEnd = fn,\n}: {\n  onStart?: PanResponderCallback;\n  onMove?: PanResponderCallback;\n  onEnd?: PanResponderCallback;\n}) {\n  return PanResponder.create({\n    onStartShouldSetPanResponder: fn,\n    onStartShouldSetPanResponderCapture: fn,\n    onMoveShouldSetPanResponder: fn,\n    onMoveShouldSetPanResponderCapture: fn,\n    onPanResponderTerminationRequest: fn,\n    onPanResponderGrant: (evt, state) => {\n      return onStart(\n        { x: evt.nativeEvent.pageX, y: evt.nativeEvent.pageY },\n        evt,\n        state\n      )\n    },\n    onPanResponderMove: (evt, state) => {\n      return onMove(\n        { x: evt.nativeEvent.pageX, y: evt.nativeEvent.pageY },\n        evt,\n        state\n      )\n    },\n    onPanResponderRelease: (evt, state) => {\n      return onEnd(\n        { x: evt.nativeEvent.pageX, y: evt.nativeEvent.pageY },\n        evt,\n        state\n      )\n    },\n  })\n}\n\n/**\n * Rotates point around given center in 2d.\n * Point is object literal { x: number, y: number }\n * @param {point} point to be rotated\n * @param {number} angle in radians\n * @param {point} center to be rotated around\n * @return {point} rotated point\n */\nexport function rotatePoint(\n  point: Point2D,\n  angle: number,\n  center: Point2D = { x: 0, y: 0 }\n) {\n  // translation to origin\n  const transOriginX = point.x - center.x\n  const transOriginY = point.y - center.y\n\n  // rotation around origin\n  const rotatedX =\n    transOriginX * Math.cos(angle) - transOriginY * Math.sin(angle)\n  const rotatedY =\n    transOriginY * Math.cos(angle) + transOriginX * Math.sin(angle)\n\n  // translate back from origin\n  const normalizedX = rotatedX + center.x\n  const normalizedY = rotatedY + center.y\n  return {\n    x: normalizedX,\n    y: normalizedY,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}